[{"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\index.tsx":"1","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\reportWebVitals.ts":"2","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\app\\store.ts":"3","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\app\\App.tsx":"4","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\todolists-reducer.ts":"6","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\TodolistsList.tsx":"7","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\api\\todolists-api.ts":"8","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\components\\AddItemForm\\AddItemForm.tsx":"10","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"11","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\app\\app-reducer.ts":"13"},{"size":643,"mtime":1611301434000,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1607869388000,"results":"16","hashOfConfig":"15"},{"size":1098,"mtime":1628280386859,"results":"17","hashOfConfig":"15"},{"size":1272,"mtime":1628283164778,"results":"18","hashOfConfig":"15"},{"size":4861,"mtime":1628285268730,"results":"19","hashOfConfig":"15"},{"size":3427,"mtime":1628285356556,"results":"20","hashOfConfig":"15"},{"size":3733,"mtime":1596295712000,"results":"21","hashOfConfig":"15"},{"size":2444,"mtime":1628284378938,"results":"22","hashOfConfig":"15"},{"size":3838,"mtime":1596295540000,"results":"23","hashOfConfig":"15"},{"size":1474,"mtime":1594727720000,"results":"24","hashOfConfig":"15"},{"size":1773,"mtime":1596295538000,"results":"25","hashOfConfig":"15"},{"size":952,"mtime":1594154724000,"results":"26","hashOfConfig":"15"},{"size":761,"mtime":1628283666437,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e4dktk",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\index.tsx",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\reportWebVitals.ts",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\app\\store.ts",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\app\\App.tsx",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\tasks-reducer.ts",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\TodolistsList.tsx",["58","59","60","61","62","63","64","65"],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\api\\todolists-api.ts",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["66","67","68","69","70","71"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["72","73"],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\components\\AddItemForm\\AddItemForm.tsx",["74","75","76"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["77","78","79"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Users\\1\\Desktop\\TodoList---ReactTS\\src\\app\\app-reducer.ts",[],{"ruleId":"80","severity":1,"message":"81","line":27,"column":8,"nodeType":"82","endLine":27,"endColumn":10,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":32,"column":8,"nodeType":"82","endLine":32,"endColumn":10,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"84","line":37,"column":8,"nodeType":"82","endLine":37,"endColumn":10,"suggestions":"86"},{"ruleId":"80","severity":1,"message":"84","line":42,"column":8,"nodeType":"82","endLine":42,"endColumn":10,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"84","line":47,"column":8,"nodeType":"82","endLine":47,"endColumn":10,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"84","line":52,"column":8,"nodeType":"82","endLine":52,"endColumn":10,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"84","line":57,"column":8,"nodeType":"82","endLine":57,"endColumn":10,"suggestions":"90"},{"ruleId":"80","severity":1,"message":"84","line":62,"column":8,"nodeType":"82","endLine":62,"endColumn":10,"suggestions":"91"},{"ruleId":"80","severity":1,"message":"92","line":34,"column":8,"nodeType":"82","endLine":34,"endColumn":10,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"94","line":38,"column":8,"nodeType":"82","endLine":38,"endColumn":33,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"94","line":45,"column":8,"nodeType":"82","endLine":45,"endColumn":45,"suggestions":"96"},{"ruleId":"80","severity":1,"message":"94","line":47,"column":86,"nodeType":"82","endLine":47,"endColumn":116,"suggestions":"97"},{"ruleId":"80","severity":1,"message":"94","line":48,"column":92,"nodeType":"82","endLine":48,"endColumn":122,"suggestions":"98"},{"ruleId":"80","severity":1,"message":"94","line":49,"column":98,"nodeType":"82","endLine":49,"endColumn":128,"suggestions":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":9,"nodeType":"106","messageId":"107","endLine":2,"endColumn":12},{"ruleId":"104","severity":1,"message":"108","line":2,"column":14,"nodeType":"106","messageId":"107","endLine":2,"endColumn":20},{"ruleId":"104","severity":1,"message":"109","line":2,"column":22,"nodeType":"106","messageId":"107","endLine":2,"endColumn":33},{"ruleId":"80","severity":1,"message":"94","line":15,"column":97,"nodeType":"82","endLine":15,"endColumn":130,"suggestions":"110"},{"ruleId":"80","severity":1,"message":"94","line":20,"column":8,"nodeType":"82","endLine":20,"endColumn":41,"suggestions":"111"},{"ruleId":"80","severity":1,"message":"94","line":24,"column":8,"nodeType":"82","endLine":24,"endColumn":41,"suggestions":"112"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["113"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["114"],["115"],["116"],["117"],["118"],["119"],["120"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["121"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["122"],["123"],["124"],["125"],["126"],"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.",["129"],["130"],["131"],{"desc":"132","fix":"133"},{"desc":"132","fix":"134"},{"desc":"132","fix":"135"},{"desc":"132","fix":"136"},{"desc":"132","fix":"137"},{"desc":"132","fix":"138"},{"desc":"132","fix":"139"},{"desc":"132","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"143","fix":"145"},{"desc":"143","fix":"146"},{"desc":"143","fix":"147"},{"desc":"143","fix":"148"},"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"149"},{"desc":"143","fix":"150"},{"desc":"143","fix":"151"},"Update the dependencies array to be: [dispatch]",{"range":"152","text":"153"},{"range":"154","text":"153"},{"range":"155","text":"153"},{"range":"156","text":"153"},{"range":"157","text":"153"},{"range":"158","text":"153"},{"range":"159","text":"153"},{"range":"160","text":"153"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"161","text":"162"},"Update the dependencies array to be: [props]",{"range":"163","text":"164"},{"range":"165","text":"164"},{"range":"166","text":"164"},{"range":"167","text":"164"},{"range":"168","text":"164"},{"range":"169","text":"164"},{"range":"170","text":"164"},{"range":"171","text":"164"},[1049,1051],"[dispatch]",[1220,1222],[1391,1393],[1596,1598],[1809,1811],[2010,2012],[2157,2159],[2336,2338],[1377,1379],"[dispatch, props.id]",[1485,1510],"[props]",[1723,1760],[1850,1880],[1974,2004],[2104,2134],[765,798],[1071,1104],[1261,1294]]